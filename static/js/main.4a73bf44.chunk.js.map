{"version":3,"sources":["View.js","Add.js","Check.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","width","tableWrapper","overflow","View","props","classes","React","useState","page","setPage","rowsPerPage","setRowsPerPage","rows","words","Paper","className","Table","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","slice","map","row","hover","tabIndex","key","IconButton","color","onClick","console","log","TablePagination","rowsPerPageOptions","component","count","length","backIconButtonProps","nextIconButtonProps","onChangePage","event","newPage","onChangeRowsPerPage","target","value","Add","handleChange","setState","word","handleKeyPress","includes","state","addWord","this","container","TextField","id","textField","onChange","margin","variant","autoFocus","onKeyPress","Component","withStyles","display","flexWrap","marginLeft","marginRight","Check","document","getElementById","style","answer","Math","floor","random","Typography","gutterBottom","TabContainer","padding","children","App","newValue","unshift","request","XMLHttpRequest","open","send","onreadystatechange","readyState","status","getResponseHeader","indexOf","responseText","split","AppBar","position","backgroundColor","Tabs","indicatorColor","textColor","scrollButtons","Tab","label","flexGrow","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a73bf44.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  tableWrapper: {\n    overflow: 'auto',\n  },\n});\n\nexport default function View(props) {\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  function handleChangePage(event, newPage) {\n    setPage(newPage);\n  }\n\n  function handleChangeRowsPerPage(event) {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  }\n\n  function deleteWord(word){\n      console.log(\"delete\");\n      \n  }\n\n  const rows = props.words;\n\n  return (\n    <Paper className={classes.root}>\n      <div className={classes.tableWrapper}>\n        <Table stickyHeader>\n          <TableHead>\n            <TableRow>\n                <TableCell align='center'>\n                    Բառեր\n                </TableCell>\n                <TableCell align='center'>\n                    Ջնջել\n                </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n              return (\n                <TableRow hover tabIndex={-1} key={row}>\n                    <TableCell align='center'>\n                        {row}\n                    </TableCell>\n                    <TableCell align='center'>\n                        <IconButton color=\"secondary\" onClick={deleteWord(row)}>\n                            <DeleteIcon />\n                        </IconButton>\n                    </TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </div>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 15]}\n        component=\"div\"\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        backIconButtonProps={{\n          'aria-label': 'previous page',\n        }}\n        nextIconButtonProps={{\n          'aria-label': 'next page',\n        }}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst styles = {\n      container: {\n        display: \"flex\",\n        flexWrap: \"wrap\"\n      },\n      textField: {\n        marginLeft: '10px',\n        marginRight: '10px',\n        width: '100%'\n      }\n  };\n\n  class Add extends React.Component {\n    constructor(props) {\n      super(props);     \n      this.state = {\n        word: \"\"\n      };\n    }\n\n  handleChange = event => {\n    if (event.key === 'Enter'){ return; }   \n    this.setState({word: event.target.value});\n  };\n\n  handleKeyPress = event => {\n    if (event.key === \"Enter\"){\n        if (!this.props.words.includes(this.state.word) && this.state.word.length > 0){\n            this.props.addWord(this.state.word);\n        }\n        this.setState({word: \"\"})        \n    }   \n  }\n\n  render(){\n    const { classes } = this.props;\n    const { word } = this.state;\n\n    return (\n        <div className={classes.container} >\n          <TextField\n            id=\"outlined-name\"\n            className={classes.textField}\n            value={word}\n            onChange={this.handleChange}\n            margin=\"normal\"\n            variant=\"outlined\"\n            autoFocus={true}\n            onKeyPress={this.handleKeyPress}\n          />\n        </div>\n      )\n  }\n}\n\nexport default withStyles(styles)(Add);\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Typography from '@material-ui/core/Typography';\nimport TextField from \"@material-ui/core/TextField\";\n\nconst styles = {\n      container: {\n        display: \"flex\",\n        flexWrap: \"wrap\"\n      },\n      textField: {\n        marginLeft: '10px',\n        marginRight: '10px',\n        width: '100%'\n      }\n  };\n\n  class Check extends React.Component {\n    constructor(props) {\n      super(props);\n      const words = props.words;\n      \n      this.state = {\n        word: words[Math.floor(Math.random()*words.length)],\n        answer: \"\"\n      };\n    }\n\n  handleChange = event => {\n    if (event.key === 'Enter'){ return; }\n    document.getElementById(\"outlined-name\").style.color = 'black';     \n    this.setState({answer: event.target.value});\n  };\n\n  handleKeyPress = event => {\n    if (event.key === \"Enter\"){\n      const { word, answer } = this.state;\n      const { words } = this.props;\n      if (word === answer){\n          this.setState({\n            word: words[Math.floor(Math.random()*words.length)],\n            answer: \"\"\n          })\n      }else{\n          document.getElementById(\"outlined-name\").style.color = 'red';\n      }      \n    }   \n  }\n\n  render(){\n    const { classes } = this.props;\n    const { word, answer } = this.state;\n\n    return (\n        <div className={classes.container} >\n          <Typography variant=\"h2\" component=\"h2\" gutterBottom align=\"center\">\n            {word}\n          </Typography>\n          <TextField\n            id=\"outlined-name\"\n            className={classes.textField}\n            value={answer}\n            onChange={this.handleChange}\n            margin=\"normal\"\n            variant=\"outlined\"\n            autoFocus={true}\n            onKeyPress={this.handleKeyPress}\n          />\n        </div>\n      )\n  }\n}\n\nexport default withStyles(styles)(Check);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport View from './View';\nimport Add from './Add';\nimport Check from './Check';\n\nfunction TabContainer(props) {\n  return (\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n      {props.children}\n    </Typography>\n  );\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n    width: '100%'\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      words: [], \n      value: 0\n    };\n  }\n\n  componentDidMount(){\n    var request = new XMLHttpRequest();\n    request.open('GET', 'https://melqonyang.github.io/spelling-checker/words.txt', true);\n    request.send(null);\n    request.onreadystatechange = () => {\n        if (request.readyState === 4 && request.status === 200) {\n            var type = request.getResponseHeader('Content-Type');\n            if (type.indexOf(\"text\") !== 1) {\n                this.setState({words: request.responseText.split('\\n')});\n            }\n        }\n    }\n  }\n\n  handleChange = (event, newValue) => {\n    this.setState({value: newValue});\n  }\n\n  addWord = (word) => {\n    const { words } = this.state;\n    words.unshift(word);\n    this.setState({words: words})   \n  }\n\n  render() {\n    const { classes } = this.props;\n    const { value, words } = this.state;\n     return (\n      <div className={classes.root}>\n      <AppBar position=\"static\" style={{backgroundColor: '#D6DBDF'}}>\n        <Tabs\n          value={value}\n          onChange={this.handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n        >\n          <Tab label=\"Դիտել ամբողջ ցուցակը\" />\n          <Tab label=\"Ստուգել\" />\n          <Tab label=\"Ավելացնել\" />\n        </Tabs>\n      </AppBar>\n      {value === 0 && <TabContainer>\n        <View words={words} />\n      </TabContainer>}\n      {value === 1 && <TabContainer>\n        <Check words={words} />\n      </TabContainer>}\n      {value === 2 && <TabContainer>\n        <Add words={words} addWord={this.addWord}/>\n      </TabContainer>}\n    </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}