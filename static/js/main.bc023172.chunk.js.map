{"version":3,"sources":["View.js","Add.js","Check.js","App.js","serviceWorker.js","index.js"],"names":["MaterialTableDemo","React","useState","columns","title","field","data","name","state","setState","options","search","editable","onRowAdd","newData","Promise","resolve","setTimeout","push","onRowUpdate","oldData","indexOf","onRowDelete","splice","Add","props","handleChange","event","key","word","target","value","handleKeyPress","words","includes","length","addWord","classes","this","className","container","TextField","id","textField","onChange","margin","variant","autoFocus","onKeyPress","Component","withStyles","display","flexWrap","marginLeft","marginRight","width","Check","document","getElementById","style","color","answer","Math","floor","random","Typography","component","gutterBottom","align","TabContainer","padding","children","App","newValue","unshift","request","XMLHttpRequest","open","send","onreadystatechange","readyState","status","getResponseHeader","responseText","split","root","AppBar","position","backgroundColor","Tabs","indicatorColor","textColor","scrollButtons","Tab","label","flexGrow","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc023172.chunk.js","sourcesContent":["import React from 'react';\nimport MaterialTable from 'material-table';\n\nexport default function MaterialTableDemo() {\n  const [state, setState] = React.useState({\n    columns: [\n      { title: 'Բառեր', field: 'name' },\n    ],\n    data: [\n      { name: 'Mehmet'},\n      {\n        name: 'Zerya Betül'\n      },\n    ],\n  });\n\n  return (\n    <MaterialTable\n      options={{\n        search: false\n      }}\n      title=\"Բոլոր բառերի ցանկը\"\n      columns={state.columns}\n      data={state.data}\n      editable={{\n        onRowAdd: newData =>\n          new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              const data = [...state.data];\n              data.push(newData);\n              setState({ ...state, data });\n            }, 600);\n          }),\n        onRowUpdate: (newData, oldData) =>\n          new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              const data = [...state.data];\n              data[data.indexOf(oldData)] = newData;\n              setState({ ...state, data });\n            }, 600);\n          }),\n        onRowDelete: oldData =>\n          new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              const data = [...state.data];\n              data.splice(data.indexOf(oldData), 1);\n              setState({ ...state, data });\n            }, 600);\n          }),\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst styles = {\n      container: {\n        display: \"flex\",\n        flexWrap: \"wrap\"\n      },\n      textField: {\n        marginLeft: '10px',\n        marginRight: '10px',\n        width: '100%'\n      }\n  };\n\n  class Add extends React.Component {\n    constructor(props) {\n      super(props);     \n      this.state = {\n        word: \"\"\n      };\n    }\n\n  handleChange = event => {\n    if (event.key === 'Enter'){ return; }   \n    this.setState({word: event.target.value});\n  };\n\n  handleKeyPress = event => {\n    if (event.key === \"Enter\"){\n        if (!this.props.words.includes(this.state.word) && this.state.word.length > 0){\n            this.props.addWord(this.state.word);\n        }\n        this.setState({word: \"\"})        \n    }   \n  }\n\n  render(){\n    const { classes } = this.props;\n    const { word } = this.state;\n\n    return (\n        <div className={classes.container} >\n          <TextField\n            id=\"outlined-name\"\n            className={classes.textField}\n            value={word}\n            onChange={this.handleChange}\n            margin=\"normal\"\n            variant=\"outlined\"\n            autoFocus={true}\n            onKeyPress={this.handleKeyPress}\n          />\n        </div>\n      )\n  }\n}\n\nexport default withStyles(styles)(Add);\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Typography from '@material-ui/core/Typography';\nimport TextField from \"@material-ui/core/TextField\";\n\nconst styles = {\n      container: {\n        display: \"flex\",\n        flexWrap: \"wrap\"\n      },\n      textField: {\n        marginLeft: '10px',\n        marginRight: '10px',\n        width: '100%'\n      }\n  };\n\n  class Check extends React.Component {\n    constructor(props) {\n      super(props);\n      const words = props.words;\n      \n      this.state = {\n        word: words[Math.floor(Math.random()*words.length)],\n        answer: \"\"\n      };\n    }\n\n  handleChange = event => {\n    if (event.key === 'Enter'){ return; }\n    document.getElementById(\"outlined-name\").style.color = 'black';     \n    this.setState({answer: event.target.value});\n  };\n\n  handleKeyPress = event => {\n    if (event.key === \"Enter\"){\n      const { word, answer } = this.state;\n      const { words } = this.props;\n      if (word === answer){\n          this.setState({\n            word: words[Math.floor(Math.random()*words.length)],\n            answer: \"\"\n          })\n      }else{\n          document.getElementById(\"outlined-name\").style.color = 'red';\n      }      \n    }   \n  }\n\n  render(){\n    const { classes } = this.props;\n    const { word, answer } = this.state;\n\n    return (\n        <div className={classes.container} >\n          <Typography variant=\"h2\" component=\"h2\" gutterBottom align=\"center\">\n            {word}\n          </Typography>\n          <TextField\n            id=\"outlined-name\"\n            className={classes.textField}\n            value={answer}\n            onChange={this.handleChange}\n            margin=\"normal\"\n            variant=\"outlined\"\n            autoFocus={true}\n            onKeyPress={this.handleKeyPress}\n          />\n        </div>\n      )\n  }\n}\n\nexport default withStyles(styles)(Check);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport View from './View';\nimport Add from './Add';\nimport Check from './Check';\n\nfunction TabContainer(props) {\n  return (\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n      {props.children}\n    </Typography>\n  );\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n    width: '100%'\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      words: [], \n      value: 0\n    };\n  }\n\n  componentDidMount(){\n    var request = new XMLHttpRequest();\n    request.open('GET', 'https://melqonyang.github.io/spelling-checker/words.txt', true);\n    request.send(null);\n    request.onreadystatechange = () => {\n        if (request.readyState === 4 && request.status === 200) {\n            var type = request.getResponseHeader('Content-Type');\n            if (type.indexOf(\"text\") !== 1) {\n                this.setState({words: request.responseText.split('\\n')});\n            }\n        }\n    }\n  }\n\n  handleChange = (event, newValue) => {\n    this.setState({value: newValue});\n  }\n\n  addWord = (word) => {\n    const { words } = this.state;\n    words.unshift(word);\n    this.setState({words: words})   \n  }\n\n  render() {\n    const { classes } = this.props;\n    const { value, words } = this.state;\n     return (\n      <div className={classes.root}>\n      <AppBar position=\"static\" style={{backgroundColor: '#D6DBDF'}}>\n        <Tabs\n          value={value}\n          onChange={this.handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n        >\n          <Tab label=\"Դիտել ամբողջ ցուցակը\" />\n          <Tab label=\"Ստուգել\" />\n          <Tab label=\"Ավելացնել\" />\n        </Tabs>\n      </AppBar>\n      {value === 0 && <TabContainer>\n        <View words={words} />\n      </TabContainer>}\n      {value === 1 && <TabContainer>\n        <Check words={words} />\n      </TabContainer>}\n      {value === 2 && <TabContainer>\n        <Add words={words} addWord={this.addWord}/>\n      </TabContainer>}\n    </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}